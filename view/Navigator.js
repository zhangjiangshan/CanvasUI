"use strict"import {nil} from '../util/Util'import BaseObject from './BaseObject'import View from './View'import {Point} from './Geometry'import {AnimatAction, AnimationCurve} from '../view/Animator'export class Navigator extends BaseObject {    constructor(from=nil, to=nil, container=nil) {        super()        this._fromView = from        this._toView = to        this._containerView = container    }    get fromView() {        return this._fromView    }    set fromView(newValue) {        if (this._fromView != newValue) {            this._fromView = newValue        }    }    get toView() {        return this._toView    }    set toView(newValue) {        if (this._toView != newValue) {            this._toView = newValue        }    }    get containerView() {        return this._containerView || this.fromView.superview    }    set containerView(newValue) {        if (this._containerView != newValue) {            this._containerView = newValue        }    }    invoke(duration) {        assert(false, this.className() + 'must implement invoke()')    }}export class AlphaNavigator extends Navigator {    invoke(duration) {        this.toView.position = this.fromView.position.copy()        this.toView.alpha = 0        this.containerView.addSubview(this.toView)        const animation = new AnimatAction(this.toView, "alpha", 1, duration, AnimationCurve.CurveEaseIn)        animation.start()    }}export class PushNavigator extends Navigator {    invoke(duration) {        this.toView.position = new Point(this.fromView.position.x + this.fromView.size.width, this.toView.position.y)        this.containerView.addSubview(this.toView)        const animation = new AnimatAction(this.toView, "position", this.fromView.position.copy(), duration, AnimationCurve.CurveEaseIn)        animation.start()    }}